<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<style>
#thetable
{
        margin-left: auto;
	margin-right: auto;
border-collapse: collapse;
 
}
#thetable tr .emptycell
{
# border-spacing: 0;
 border-style: inset;
 border-width: 10px;

}

#msgarea{
    min-height:20px
    }
.invisible { display: none; }
.emptycell { background-color: yellow; width: 100px; height: 100px; background-position: center center; background-image: url(greycircle.svg) ;border-color: yellow; }
.redcell    { background-color: yellow; width: 100px; height: 100px; background-image: url(redcircle.svg) ;}
.blackcell    { background-color: yellow; width: 100px; height: 100px; background-image: url(blackcircle.svg) ;}

.hintbox {  width: 100px; height: 100px; }
.hintcell { background-color: yellow; width: 100px; height: 100px;  }
.movebutton {  width: 100px; height: 100px;  }
.movebutton button {  width: 100px; height: 100px;  background-image: url(redarrow.svg);}
</style>
                 <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"> </script>
<script type="application/javascript"> <![CDATA[

function boardToString(){
  var ans = "";

  for(var ir = CONN4.rows; ir > 0 ; ir--){
    for(var ic = 1; ic <= CONN4.cols ; ic++){
        var tdid = "row"+ir+"col"+ic;
        switch(document.getElementById(tdid).className){
           case "redcell" :
              ans += "R";
           break;
           case "blackcell" :
              ans += "B";
           break;
           default:
              ans += " ";
       }//switch
      ans += "\n";
      console.log("classname for "+tdid+"is: "+document.getElementById(tdid).className);
    } //for ic
  } //for ir
  return ans;
}

function getHints(){
  document.getElementById("msgarea").textContent += " boardToString(): "+ boardToString();  //placeholder
  jQuery.get( "/api/url/goes/here", { "key" :   boardToString() }, function(data, textStatus, jqXHR){
           //set hint data here
   )  , json
}

function getSvgObjElem(filename){
  var objelm = document.createElement("object");
  objelm.setAttribute("data",filename);
  objelm.setAttribute("type","image/svg+xml");
  return objelm;
}
 var CONN4 = {  boarddata : { col: {}, row: {}, diag1:{}, diag2: {}} ,
      whoseturn : "r", //r or b
      movebutton : [],
      movetd : []
   };

 function  move(colidx){
    var colarr = CONN4.boarddata.col["" + colidx];
    //find last entry that is not empty and change to color
      //console.log("colarr (len "+colarr.length+") is: "+colarr);
    var cell = {};
    for(var i = colarr.length - 1 ; i >= 0; i--){
      // console.log("i: "+i);
      if (colarr[i].className ===  "emptycell" ){
            cell = colarr[i];
            if(i == 0){
                CONN4.movebutton[colidx].disabled = true;
                CONN4.movetd[colidx].className = "";
                CONN4.movebutton[colidx].className = "invisible";
            }
            break;
      }
    }
    if(CONN4.whoseturn === "r"){
       cell.className = "redcell";
       CONN4.whoseturn = "b";
                             document.getElementById("msgarea").textContent = "black's turn";
       var redre = /redarrow/;
       CONN4.movecss.cssText = CONN4.movecss.cssText.replace(redre, "blackarrow");
    }else{
        cell.className = "blackcell";
        CONN4.whoseturn = "r";
                                 document.getElementById("msgarea").textContent = "red's turn";
        var blackre = /blackarrow/;
       CONN4.movecss.cssText = CONN4.movecss.cssText.replace(blackre, "redarrow");
    }
    var arrname = ["col", "row", "diag1", "diag2"] ;
    for(var ai in arrname ){
         //console.log("calling whowins on arrname[" + ai+" ] which is "+ arrname[ai] +" which is : "+CONN4.boarddata[arrname[ai]].toString());
        if (whowins( CONN4.boarddata[arrname[ai]])){
            var color = CONN4.whoseturn === "r" ? "black" : "red"; 
            document.getElementById("msgarea").textContent = color + " wins!";
            document.getElementById("buttonrow").className = "invisible";
            return;
        }
    }

 }


 function whowins (outerarr){ //an array of tds
     var debug = false;
     var current = "";
     var inrow = 0;
     for(var outeri in outerarr){
     var arr = outerarr[outeri];
     for(var i in arr) {
         if (!arr[i]) continue; // Skip null, undefi
         if (arr[i].className ===  current){
            inrow++;
            if (debug) console.log(" whowins()["+outeri+"]["+i+"] current="+current+" inrow="+inrow);
            if(current && inrow === 4 && current !== "emptycell" ){
                console.log(" whowins()["+outeri+"]["+i+"] returning "+current);
                return current;
            }
          }else{
             current = arr[i].className;
             inrow = 1;
             if (debug) console.log(" whowins()["+outeri+"]["+i+"] current="+current+" inrow="+inrow);
          }
     }
     }
     if (debug) console.log(" whowins() after for loop");
 }

 function createBoard(){      //called once
  //first find the css for the move button
   for(var ssridx in document.styleSheets[0].cssRules){
       var ssr = document.styleSheets[0].cssRules[ssridx];
       //console.log("ssr: "+ssr);
       if (ssr.selectorText === ".movebutton button" ){
          CONN4.movecss = ssr;
           console.log("found: "+ssr);
          break;
       }
   }

  var ir = 0;
  var ic = 0;
  var thetable = document.getElementById("thetable");
  var rows =  parseInt(  document.getElementById("rows").value);
  var cols =  parseInt( document.getElementById("cols").value);
  CONN4.rows = rows;
  CONN4.cols = cols;

 // var boarddata = Array(cols); //array of arrays
  var boardcols = Array(cols);
  var boardrows = Array(rows);
  var diags1   = {};
  var diags2   = {};

  var hintrow  = document.createElement("tr");
  thetable.appendChild(hintrow);
  for(ic = 1; ic <= cols ; ic++){
     var newtd = document.createElement("td");
     newtd.className = "hintbox";
     hintrow.appendChild(newtd);
  }

  var buttonrow  = document.createElement("tr");
  buttonrow.id = "buttonrow";
  thetable.appendChild(buttonrow);
  for(ic = 1; ic <= cols ; ic++){
     var newtd = document.createElement("td");
     newtd.className = "movebutton";
     buttonrow.appendChild(newtd);
     CONN4.movetd[ic] = newtd;
     var newbutton = document.createElement("button");
     var helper = function (i) {
         return function (e) {
         move(i);
        };
     };

     newbutton.onclick = helper(ic);
     /*(function() {
         // Define and invoke
         var col = ic; // Private state of function be
         return function() { return move(col); };
        });             */
     newtd.appendChild(newbutton);
     CONN4.movebutton[ic] = newbutton;
     
  }

  for(ir = rows; ir > 0 ; ir--){
    var newrow = document.createElement("tr");
    thetable.appendChild(newrow);
    for(ic = 1; ic <= cols ; ic++){
        var newtd = document.createElement("td");
        newtd.setAttribute("id","row"+ir+"col"+ic);
        newtd.className = "emptycell";
        newrow.appendChild(newtd);
        //objelm = getSvgObjElem("greycircle.svg");
        //newtd.appendChild(objelm);
        if (!  CONN4.boarddata.col["" + ic]) { CONN4.boarddata.col["" + ic] = []; }
        CONN4.boarddata.col["" + ic].push( newtd);
         if (!  CONN4.boarddata.row["" + ir]    ) { CONN4.boarddata.row["" + ir] = []; }
        CONN4.boarddata.row["" + ir].push( newtd);
          if (!  CONN4.boarddata.diag1["" + (ir + ic)]    ) { CONN4.boarddata.diag1["" + (ir + ic)] = []; }
        CONN4.boarddata.diag1["" + (ir + ic)].push( newtd);
          if (!   CONN4.boarddata.diag2["" + (ic - ir)]   ) { CONN4.boarddata.diag2["" + (ic - ir)] = []; }
        CONN4.boarddata.diag2["" + (ic - ir)].push( newtd);
    }
  }
  document.getElementById("theform").className = "invisible" ;
  document.getElementById("hintbutton").className = "" ;
}
]]>
</script>

</head>
<body>
<form id="theform" action="#">
rows: <input type="text" id="rows" /> <br />
cols: <input type="text" id="cols" /> <br />
<input type="submit" onclick="createBoard()" /><br />
</form>
<p  id="msgarea">
</p>
<p id="hintbutton" class="invisible"><button onclick="getHints()">hint</button>
</p>
<table id="thetable">

</table>
<p class="invisible">
test area:
<table><tr><td class="emptycell">
<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
   <circle cx="50" cy="50" r="40" stroke="black" stroke-width="2" fill="red" />
</svg> 
 </td>
<td class="emptycell">
<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
   <circle cx="50" cy="50" r="40" stroke="black" stroke-width="2" fill="blue" />
</svg> 
 </td>
  <td class="redcell"> </td>
    <td class="emptycell"> </td>
     <td class="blackcell"> </td>
</tr></table>
</p>

</body></html>
